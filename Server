tsconfig.json

{
  "compilerOptions": {
    "target": "ES6",
    "module": "CommonJS",
    "outDir": "./dist",
    "rootDir": "./src",
    "strict": true
  }
}


Package JSON


{
  "name": "your-project-name",
  "version": "1.0.0",
  "description": "Your project description",
  "main": "dist/server.js",
  "scripts": {
    "start": "node dist/server.js",
    "dev": "ts-node src/server.ts"
  },
  "devDependencies": {
    "typescript": "^4.0.5"
  }
}

.src/server ts

import * as http from 'http';
import * as fs from 'fs';

const server = http.createServer((req, res) => {
  if (req.method === 'POST' && req.url === '/saveUser') {
    let data = '';
    req.on('data', (chunk) => {
      data += chunk;
    });
    req.on('end', () => {
      const userData = JSON.parse(data);
      saveUser(userData, (err) => {
        if (err) {
          res.writeHead(500, { 'Content-Type': 'application/json' });
          res.end(JSON.stringify({ error: 'Error saving user information' }));
        } else {
          res.writeHead(200, { 'Content-Type': 'application/json' });
          res.end(JSON.stringify({ message: 'User information saved successfully' }));
        }
      });
    });
  } else if (req.method === 'GET' && req.url === '/getUsers') {
    getUsers((err, users) => {
      if (err) {
        res.writeHead(500, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({ error: 'Error retrieving user information' }));
      } else {
        res.writeHead(200, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify(users));
      }
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

server.listen(3000, () => {
  console.log('Server is running on port 3000');
});

function saveUser(user, callback) {
  fs.readFile('./data/users.json', (err, data) => {
    if (err) {
      callback(err);
      return;
    }
    const users = JSON.parse(data);
    users.push({ firstName: user.firstName, lastName: user.lastName });
    fs.writeFile('./data/users.json', JSON.stringify(users, null, 2), callback);
  });
}

function getUsers(callback) {
  fs.readFile('./data/users.json', (err, data) => {
    if (err) {
      callback(err);
      return;
    }
    const users = JSON.parse(data);
    callback(null, users);
  });
}


data/user.json

Npm install

Npm start


